set.seed(17)
set.seed(17)
data_set_size <- floor(nrow(iris)/2)
# data_set_size <- floor(nrow(iris))
indexes <- sample(1:nrow(iris), data_set_size)
training <- iris[indexes,]
test <- iris[-indexes,]
library(randomForest)
rf_classifier <- randomForest(Species ~., data = training, ntree=100, mtry=2, importance=TRUE)
rf_classifier
prediction_for_table <- predict(rf_classifier, test[,-5])
table(observed=test[,5], predicted=prediction_for_table)
library(ROCR)
prediction_for_roc_curve <-predict(rf_classifier, test[,-5], type="prob")
#use beautiful colours
pretty_colours <-c ("red","blue","black") #setosa =red, versicolor = blue and virginia = black
classes <- levels(test$Species)
for(i in 1:3)
{
#Define which obs belong to class[i]
true_values <-ifelse(test[,5]==classes[i],1,0)
pred <- prediction(prediction_for_roc_curve[,i], true_values)
perf <- performance(pred, "tpr","fpr")
if(i==1){
plot(perf, main="ROC Curve", col=pretty_colours[i])
}
else
{
plot(perf, main="ROC Curve", col=pretty_colours[i], add=TRUE)
}
#Calculate the AUC and print it to screen
auc.perf <- performance (pred, measure ="auc")
print(auc.perf@y.values)
}
varImpPlot(rf_classifier)
set.seed(17)
data_set_size <- floor(nrow(iris)/2)
# data_set_size <- floor(nrow(iris))
indexes <- sample(1:nrow(iris), data_set_size)
training <- iris[indexes,]
test <- iris[-indexes,]
library(randomForest)
rf_classifier <- randomForest(Species ~., data = training, ntree=100, mtry=2, importance=TRUE)
rf_classifier
prediction_for_table <- predict(rf_classifier, test[,-5])
table(observed=test[,5], predicted=prediction_for_table)
library(ROCR)
prediction_for_roc_curve <-predict(rf_classifier, test[,-5], type="prob")
#use beautiful colours
pretty_colours <-c ("red","blue","black") #setosa =red, versicolor = blue and virginia = black
classes <- levels(test$Species)
for(i in 1:3)
{
#Define which obs belong to class[i]
true_values <-ifelse(test[,5]==classes[i],1,0)
pred <- prediction(prediction_for_roc_curve[,i], true_values)
perf <- performance(pred, "tpr","fpr")
if(i==1){
plot(perf, main="ROC Curve", col=pretty_colours[i])
}
else
{
plot(perf, main="ROC Curve", col=pretty_colours[i], add=TRUE)
}
#Calculate the AUC and print it to screen
auc.perf <- performance (pred, measure ="auc")
print(auc.perf@y.values)
}
# varImpPlot(rf_classifier)
varImpPlot(rf_classifier)
